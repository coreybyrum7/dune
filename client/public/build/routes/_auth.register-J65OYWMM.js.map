{
  "version": 3,
  "sources": ["../../../app/routes/_auth.register.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_auth.register.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_auth.register.tsx\");\n  import.meta.hot.lastModified = \"1699305550732.3901\";\n}\n// REMIX HMR END\n\n// ./app/routes/register.tsx\n\nimport { json } from \"@remix-run/node\";\nimport { useActionData } from \"@remix-run/react\";\nimport ProfileForm from \"~/components/Profile/Form\";\nimport { register } from \"~/models/profiles.server\";\nimport { createUserSession } from \"~/utils/session.server\";\nexport const action = async ({\n  request\n}) => {\n  try {\n    // get request form data\n    const formData = await request.formData();\n\n    // get form input values\n    const email = formData.get(\"email\");\n    const password = formData.get(\"password\");\n    const username = formData.get(\"username\");\n    const title = formData.get(\"job-title\");\n    const twitterUsername = formData.get(\"twitterUsername\");\n    const bio = formData.get(\"bio\");\n    const websiteUrl = formData.get(\"website\");\n    const errors = {\n      email: email ? null : \"Email is required\",\n      password: password ? null : \"Password is required\",\n      username: username ? null : \"Username is required\",\n      title: title ? null : \"Job title is required\"\n    };\n    const hasErrors = Object.values(errors).some(errorMessage => errorMessage);\n    if (hasErrors) throw errors;\n    console.log({\n      email,\n      password,\n      username,\n      title,\n      twitterUsername,\n      bio,\n      websiteUrl\n    });\n\n    // function to register user with user details\n    const {\n      jwt,\n      user,\n      error\n    } = await register({\n      email,\n      password,\n      username,\n      title,\n      twitterUsername,\n      bio,\n      websiteUrl\n    });\n    console.log({\n      jwt,\n      user,\n      error\n    });\n\n    // throw strapi error message if strapi returns an error\n    if (error) throw {\n      [error.name]: error.message\n    };\n\n    // create user session\n    return createUserSession({\n      jwt,\n      user\n    }, \"/\");\n  } catch (error) {\n    // return error response\n    return json(error);\n  }\n};\nconst Register = () => {\n  _s();\n  const errors = useActionData();\n  console.log({\n    errors\n  });\n  return <section className=\"site-section profiles-section\">\n      <div className=\"wrapper\">\n        <header className=\"section-header\">\n          <h2 className=\"text-4xl\">Register</h2>\n          <p>Create a new profile</p>\n        </header>\n\n        {/* set form action to `login` and pass errors if any */}\n        <ProfileForm action=\"create\" errors={errors} />\n      </div>\n    </section>;\n};\n_s(Register, \"MXG3vJWOluRyotNja3c0q7lD6Co=\", false, function () {\n  return [useActionData];\n});\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,kBAAqB;AAGrB,sBAAyB;AACzB,qBAAkC;AA8ExB;AAxGV,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,oCAAsC,EAAE;AAAA,EACjF;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA+B;AAC/B,cAAY,IAAI,eAAe;AACjC;AA8EA,IAAM,WAAW,MAAM;AACrB,KAAG;AACH,QAAM,SAAS,cAAc;AAC7B,UAAQ,IAAI;AAAA,IACV;AAAA,EACF,CAAC;AACD,SAAO,mDAAC,aAAQ,WAAU,iCACtB,6DAAC,SAAI,WAAU,WACb;AAAA,uDAAC,YAAO,WAAU,kBAChB;AAAA,yDAAC,QAAG,WAAU,YAAW,wBAAzB;AAAA;AAAA;AAAA;AAAA,aAAiC;AAAA,MACjC,mDAAC,OAAE,oCAAH;AAAA;AAAA;AAAA;AAAA,aAAuB;AAAA,SAFzB;AAAA;AAAA;AAAA;AAAA,WAGA;AAAA,IAGA,mDAAC,gBAAY,QAAO,UAAS,UAA7B;AAAA;AAAA;AAAA;AAAA,WAA6C;AAAA,OAP/C;AAAA;AAAA;AAAA;AAAA,SAQA,KATG;AAAA;AAAA;AAAA;AAAA,SAUL;AACJ;AACA,GAAG,UAAU,gCAAgC,OAAO,WAAY;AAC9D,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AACL,IAAO,wBAAQ;AACf,IAAI;AACJ,aAAa,IAAI,UAAU;AAE3B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
