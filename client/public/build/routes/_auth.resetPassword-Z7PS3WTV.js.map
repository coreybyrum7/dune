{
  "version": 3,
  "sources": ["../../../app/routes/_auth.resetPassword.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_auth.resetPassword.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_auth.resetPassword.tsx\");\n  import.meta.hot.lastModified = \"1699295184619.9004\";\n}\n// REMIX HMR END\n\n// ./app/routes/reset-password.tsx\n\nimport { redirect, json } from \"@remix-run/node\";\nimport { Form, useActionData, useLoaderData, useNavigation } from \"@remix-run/react\";\nimport { resetPass } from \"~/models/profiles.server\";\n// get code from URL parameters\nexport const loader = async ({\n  request\n}) => {\n  const url = new URL(request.url);\n  const code = url.searchParams.get(\"code\");\n\n  // take user to homepage if there's no code in the url\n  if (!code) return redirect(\"/sign-in\");\n  return json({\n    code: code\n  });\n};\n\n// get password and code and send reset password request\nexport const action = async ({\n  request\n}) => {\n  const formData = await request.formData();\n  const code = formData.get(\"code\");\n  const password = formData.get(\"password\");\n  const passwordConfirmation = formData.get(\"confirmPassword\");\n  const response = await resetPass({\n    password,\n    passwordConfirmation,\n    code\n  });\n\n  // return error is passwords don't match\n  if (password != passwordConfirmation) return json({\n    confirmPassword: \"Passwords should match\"\n  });\n  return json(response);\n};\nconst ResetPass = () => {\n  _s();\n  const navigation = useNavigation();\n  const error = useActionData();\n  const {\n    code\n  } = useLoaderData();\n  return <section className=\"site-section profiles-section\">\n      <div className=\"wrapper\">\n        <header className=\"section-header\">\n          <h2 className=\"text-4xl\">Reset password</h2>\n          <p>Enter your new password</p>\n        </header>\n\n        <Form method=\"post\" className=\"form\">\n          <input value={code} type=\"hidden\" id=\"code\" name=\"code\" required />\n          <div className=\"wrapper\">\n            <div className=\"form-control\">\n              <label htmlFor=\"job-title\">Password</label>\n              <input id=\"password\" name=\"password\" type=\"password\" className=\"form-input\" required />\n            </div>\n            <div className=\"form-control\">\n              <label htmlFor=\"job-title\">Confirm password</label>\n              <input id=\"confirmPassword\" name=\"confirmPassword\" type=\"password\" className=\"form-input\" required />\n              {error?.confirmPassword ? <em className=\"text-red-600\">{error.confirmPassword}</em> : null}\n            </div>\n            <div className=\"action-cont mt-4\">\n              <button className=\"cta\"> {navigation.state == \"submitting\" ? \"Sending\" : \"Reset password\"} </button>\n            </div>\n          </div>\n        </Form>\n      </div>\n    </section>;\n};\n_s(ResetPass, \"xjGM8Z5C946dBOsSWY2IpQ02ogE=\", false, function () {\n  return [useNavigation, useActionData, useLoaderData];\n});\n_c = ResetPass;\nexport default ResetPass;\nvar _c;\n$RefreshReg$(_c, \"ResetPass\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,kBAA+B;AAE/B,sBAA0B;AA6ChB;AArEV,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,yCAA2C,EAAE;AAAA,EACtF;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAoC;AACpC,cAAY,IAAI,eAAe;AACjC;AA0CA,IAAM,YAAY,MAAM;AACtB,KAAG;AACH,QAAM,aAAa,cAAc;AACjC,QAAM,QAAQ,cAAc;AAC5B,QAAM;AAAA,IACJ;AAAA,EACF,IAAI,cAAc;AAClB,SAAO,mDAAC,aAAQ,WAAU,iCACtB,6DAAC,SAAI,WAAU,WACb;AAAA,uDAAC,YAAO,WAAU,kBAChB;AAAA,yDAAC,QAAG,WAAU,YAAW,8BAAzB;AAAA;AAAA;AAAA;AAAA,aAAuC;AAAA,MACvC,mDAAC,OAAE,uCAAH;AAAA;AAAA;AAAA;AAAA,aAA0B;AAAA,SAF5B;AAAA;AAAA;AAAA;AAAA,WAGA;AAAA,IAEA,mDAAC,QAAK,QAAO,QAAO,WAAU,QAC5B;AAAA,yDAAC,WAAM,OAAO,MAAM,MAAK,UAAS,IAAG,QAAO,MAAK,QAAO,UAAQ,QAAhE;AAAA;AAAA;AAAA;AAAA,aAAiE;AAAA,MACjE,mDAAC,SAAI,WAAU,WACb;AAAA,2DAAC,SAAI,WAAU,gBACb;AAAA,6DAAC,WAAM,SAAQ,aAAY,wBAA3B;AAAA;AAAA;AAAA;AAAA,iBAAmC;AAAA,UACnC,mDAAC,WAAM,IAAG,YAAW,MAAK,YAAW,MAAK,YAAW,WAAU,cAAa,UAAQ,QAApF;AAAA;AAAA;AAAA;AAAA,iBAAqF;AAAA,aAFvF;AAAA;AAAA;AAAA;AAAA,eAGA;AAAA,QACA,mDAAC,SAAI,WAAU,gBACb;AAAA,6DAAC,WAAM,SAAQ,aAAY,gCAA3B;AAAA;AAAA;AAAA;AAAA,iBAA2C;AAAA,UAC3C,mDAAC,WAAM,IAAG,mBAAkB,MAAK,mBAAkB,MAAK,YAAW,WAAU,cAAa,UAAQ,QAAlG;AAAA;AAAA;AAAA;AAAA,iBAAmG;AAAA,UAClG,OAAO,kBAAkB,mDAAC,QAAG,WAAU,gBAAgB,gBAAM,mBAApC;AAAA;AAAA;AAAA;AAAA,iBAAoD,IAAQ;AAAA,aAHxF;AAAA;AAAA;AAAA;AAAA,eAIA;AAAA,QACA,mDAAC,SAAI,WAAU,oBACb,6DAAC,YAAO,WAAU,OAAM;AAAA;AAAA,UAAE,WAAW,SAAS,eAAe,YAAY;AAAA,UAAiB;AAAA,aAA1F;AAAA;AAAA;AAAA;AAAA,eAA2F,KAD7F;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,WAZF;AAAA;AAAA;AAAA;AAAA,aAaA;AAAA,SAfF;AAAA;AAAA;AAAA;AAAA,WAgBA;AAAA,OAtBF;AAAA;AAAA;AAAA;AAAA,SAuBA,KAxBG;AAAA;AAAA;AAAA;AAAA,SAyBL;AACJ;AACA,GAAG,WAAW,gCAAgC,OAAO,WAAY;AAC/D,SAAO,CAAC,eAAe,eAAe,aAAa;AACrD,CAAC;AACD,KAAK;AACL,IAAO,6BAAQ;AACf,IAAI;AACJ,aAAa,IAAI,WAAW;AAE5B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
