{
  "version": 3,
  "sources": ["../../../app/routes/members.$slug.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/members.$slug.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/members.$slug.tsx\");\n  import.meta.hot.lastModified = \"1699290545451.8562\";\n}\n// REMIX HMR END\n\n// ./app/routes/$slug.tsx\n\nimport { json } from \"@remix-run/node\";\nimport { useLoaderData, useActionData } from \"@remix-run/react\";\nimport { useState } from \"react\";\nimport { updateProfile, getProfileBySlug } from \"~/models/profiles.server\";\nimport { getUserData } from \"~/utils/session.server\";\nimport ProfileCard from \"~/components/Profile/Card\";\nimport ProfileForm from \"~/components/Profile/Form\";\n\n// type definition of Loader data\n\n// action data type\n\n// loader function to get posts by slug\nexport const loader = async ({\n  params,\n  request\n}) => {\n  return json({\n    userData: await getUserData(request),\n    profile: await getProfileBySlug(params.slug)\n  });\n};\n\n// action to handle form submission\nexport const action = async ({\n  request\n}) => {\n  // get user data\n  const data = await getUserData(request);\n\n  // get request form data\n  const formData = await request.formData();\n\n  // get form values\n  const id = formData.get(\"id\");\n  const username = formData.get(\"username\");\n  const twitterUsername = formData.get(\"twitterUsername\");\n  const bio = formData.get(\"bio\");\n  const title = formData.get(\"job-title\");\n  const websiteUrl = formData.get(\"website\");\n  console.log({\n    id,\n    username,\n    twitterUsername,\n    bio,\n    title,\n    websiteUrl\n  });\n  // const user = await requireUser(request);\n  // console.log({ from: \"sess\", user });\n\n  // error object\n  // each error property is assigned null if it has a value\n  const errors = {\n    id: id ? null : \"Id is required\",\n    username: username ? null : \"username is required\",\n    title: title ? null : \"title is required\"\n  };\n\n  // return true if any property in the error object has a value\n  const hasErrors = Object.values(errors).some(errorMessage => errorMessage);\n\n  // return the error object\n  if (hasErrors) return json(errors);\n\n  // run the update profile function\n  // pass the user jwt to the function\n  await updateProfile({\n    id,\n    username,\n    twitterUsername,\n    bio,\n    title,\n    websiteUrl\n  }, data?.jwt);\n\n  // redirect users to home page\n  return null;\n};\nconst Profile = () => {\n  _s();\n  const {\n    profile,\n    userData\n  } = useLoaderData();\n  const errors = useActionData();\n  const [profileData, setprofileData] = useState(profile);\n  const [isEditing, setIsEditing] = useState(false);\n  console.log({\n    userData,\n    profile\n  });\n\n  // useEffect(() => {\n  //   console.log({ profileData });\n  // }, [profileData]);\n\n  return <section className=\"site-section\">\n      <div className=\"wrapper flex items-center py-16 min-h-[calc(100vh-4rem)]\">\n        <div className=\"profile-cont w-full max-w-5xl m-auto\">\n          {profileData ? <>\n              {/* Profile card with `preview` = true */}\n              <ProfileCard profile={profileData} preview={true} />\n\n              {/* list of actions */}\n              <ul className=\"actions\">\n                <li className=\"action\">\n                  <button className=\"cta w-icon\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"icon stroke\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z\" />\n                    </svg>\n                    <span>Share</span>\n                  </button>\n                </li>\n                {userData?.user?.id == profile.id && <li className=\"action\">\n                    <button onClick={() => setIsEditing(!isEditing)} className=\"cta w-icon\">\n                      {!isEditing ? <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"icon stroke\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\n                        </svg> : <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"icon stroke\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" strokeWidth={2}>\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                        </svg>}\n\n                      <span>{!isEditing ? \"Edit\" : \"Cancel\"}</span>\n                    </button>\n                  </li>}\n              </ul>\n            </> : <p className=\"text-center\">Oops, that profile doesn't exist... yet</p>}\n\n          {/* display dynamic form component when user clicks on edit */}\n          {userData?.user?.id == profile?.id && isEditing && <ProfileForm errors={errors} profile={profile} action={\"edit\"} onModifyData={value => setprofileData(value)} />}\n        </div>\n      </div>\n    </section>;\n};\n_s(Profile, \"Fco0lYP9K9dZXr12qFYkDSWRFbE=\", false, function () {\n  return [useLoaderData, useActionData];\n});\n_c = Profile;\nexport default Profile;\nvar _c;\n$RefreshReg$(_c, \"Profile\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react"]
}
