{
  "version": 3,
  "sources": ["../../../app/components/Profile/Form/index.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/Profile/Form/index.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/Profile/Form/index.tsx\");\n  import.meta.hot.lastModified = \"1699305512545.8582\";\n}\n// REMIX HMR END\n\n// ./app/components/ProfileForm.tsx\n\nimport { Form, useNavigation } from \"@remix-run/react\";\nimport { useEffect, useState } from \"react\";\n\n// custom type declarations\n\nconst ProfileForm = ({\n  profile,\n  onModifyData,\n  action,\n  errors\n}) => {\n  _s();\n  // get state of form\n  const navigation = useNavigation();\n\n  // state for user profile data\n  const [profileData, setProfileData] = useState(profile);\n\n  // state for user login information\n  const [authData, setAuthData] = useState({\n    email: \"\",\n    password: \"\"\n  });\n\n  // helper function to set profile data value\n  const updateField = field => setProfileData(value => ({\n    ...value,\n    ...field\n  }));\n\n  // listen to changes to the profileData state\n  // run the onModifyData() function passing the profileData to it\n  //  this will snd the data to the parent component\n  useEffect(() => {\n    // run function if `onModifyData` is passed to the component\n    if (onModifyData) {\n      // depending on the action passed to the form\n      // select which data to send to parent when modified\n\n      // when action == create, send both the profile data and auth data\n      if (action == \"create\") onModifyData({\n        ...profileData,\n        ...authData\n      });\n      // when action == login, send only auth data\n      else if (action == \"login\") onModifyData(authData);\n      // send profile data by default (when action == edit)\n      else onModifyData(profileData);\n    }\n  }, [profileData, authData]);\n  return <Form method={action == \"edit\" ? \"put\" : \"post\"} className=\"form\">\n      <fieldset disabled={navigation.state == \"submitting\"}>\n        <input value={profile?.id} type=\"hidden\" name=\"id\" required />\n        <div className=\"wrapper\">\n          {action != \"login\" &&\n        // profile edit input forms\n        <>\n              <div className=\"form-group\">\n                <div className=\"form-control\">\n                  <label htmlFor=\"username\">Name</label>\n                  <input onChange={e => updateField({\n                username: e.target.value\n              })} value={profileData?.username} id=\"username\" name=\"username\" type=\"text\" className=\"form-input\" required />\n                  {errors?.username ? <em className=\"text-red-600\">{errors.username}</em> : null}\n                </div>\n                <div className=\"form-control\">\n                  <label htmlFor=\"twitterUsername\">Twitter username</label>\n                  <input onChange={e => updateField({\n                twitterUsername: e.target.value\n              })} value={profileData?.twitterUsername} id=\"twitterUsername\" name=\"twitterUsername\" type=\"text\" className=\"form-input\" placeholder=\"Without the @\" />\n                </div>\n              </div>\n              <div className=\"form-control\">\n                <label htmlFor=\"bio\">Bio</label>\n                <textarea onChange={e => updateField({\n              bio: e.target.value\n            })} value={profileData?.bio} name=\"bio\" id=\"bio\" cols={30} rows={3} className=\"form-textarea\"></textarea>\n              </div>\n              <div className=\"form-group\">\n                <div className=\"form-control\">\n                  <label htmlFor=\"job-title\">Job title</label>\n                  <input onChange={e => updateField({\n                title: e.target.value\n              })} value={profileData?.title} id=\"job-title\" name=\"job-title\" type=\"text\" className=\"form-input\" />\n                  {errors?.title ? <em className=\"text-red-600\">{errors.title}</em> : null}\n                </div>\n                <div className=\"form-control\">\n                  <label htmlFor=\"website\">Website link</label>\n                  <input onChange={e => updateField({\n                websiteUrl: e.target.value\n              })} value={profileData?.websiteUrl} id=\"website\" name=\"website\" type=\"url\" className=\"form-input\" />\n                </div>\n              </div>\n            </>}\n          {action != \"edit\" &&\n        // user auth input forms\n        <>\n              <div className=\"form-control\">\n                <label htmlFor=\"job-title\">Email</label>\n                <input onChange={e => setAuthData(data => ({\n              ...data,\n              email: e.target.value\n            }))} value={authData.email} id=\"email\" name=\"email\" type=\"email\" className=\"form-input\" required />\n                {errors?.email ? <em className=\"text-red-600\">{errors.email}</em> : null}\n              </div>\n              <div className=\"form-control\">\n                <label htmlFor=\"job-title\">Password</label>\n                <input onChange={e => setAuthData(data => ({\n              ...data,\n              password: e.target.value\n            }))} value={authData.password} id=\"password\" name=\"password\" type=\"password\" className=\"form-input\" />\n                {errors?.password ? <em className=\"text-red-600\">{errors.password}</em> : null}\n              </div>\n              {errors?.ValidationError ? <em className=\"text-red-600\">{errors.ValidationError}</em> : null}\n              {errors?.ApplicationError ? <em className=\"text-red-600\">{errors.ApplicationError}</em> : null}\n            </>}\n\n          <div className=\"action-cont mt-4\">\n            <button className=\"cta\"> {navigation.state == \"submitting\" ? \"Submitting\" : \"Submit\"} </button>\n          </div>\n        </div>\n      </fieldset>\n    </Form>;\n};\n_s(ProfileForm, \"7bcPVMD2g+U94V/2IgJOuAt0RX8=\", false, function () {\n  return [useNavigation];\n});\n_c = ProfileForm;\nexport default ProfileForm;\nvar _c;\n$RefreshReg$(_c, \"ProfileForm\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react"]
}
